<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeparmentDescriptionRequired" xml:space="preserve">
    <value>Department description is required</value>
  </data>
  <data name="DepartmentDeleted" xml:space="preserve">
    <value>Department deleted successfully</value>
  </data>
  <data name="DepartmentDescriptionLength" xml:space="preserve">
    <value>Department description length is less than or equal 300 characters</value>
  </data>
  <data name="DepartmentNameLength" xml:space="preserve">
    <value>Department name length is less than or equal 100 characters</value>
  </data>
  <data name="DepartmentNameRequired" xml:space="preserve">
    <value>Department name is requried</value>
  </data>
  <data name="DepartmentNotFound" xml:space="preserve">
    <value>Department is not found</value>
  </data>
  <data name="EmailFormat" xml:space="preserve">
    <value>Invalid email format</value>
  </data>
  <data name="EmailLength" xml:space="preserve">
    <value>Email is less than or equal to 100 characters</value>
  </data>
  <data name="EmployeeDeleted" xml:space="preserve">
    <value>Employee deleted successfily</value>
  </data>
  <data name="EmployeeEmailRequired" xml:space="preserve">
    <value>Email name is required</value>
  </data>
  <data name="EmployeeFirstNameRequired" xml:space="preserve">
    <value>First name is required</value>
  </data>
  <data name="EmployeeLastNameRequired" xml:space="preserve">
    <value>Last name is required</value>
  </data>
  <data name="EmployeeNotFound" xml:space="preserve">
    <value>Employee is not found</value>
  </data>
  <data name="EmployeePhoneNumberRequired" xml:space="preserve">
    <value>Phone number name is required</value>
  </data>
  <data name="EmployeeSalaryRequired" xml:space="preserve">
    <value>Salary is required</value>
  </data>
  <data name="FirstNameLength" xml:space="preserve">
    <value>First name is less than or equal to 100 characters</value>
  </data>
  <data name="IdIsGreaterThan0" xml:space="preserve">
    <value>The Id is Greater than zero</value>
  </data>
  <data name="InvalidPhoneNumberFormat" xml:space="preserve">
    <value>Invalid phone fumber format</value>
  </data>
  <data name="LastNameLength" xml:space="preserve">
    <value>Last name is less than or equal to 100 characters</value>
  </data>
  <data name="PhoneNumberFormat" xml:space="preserve">
    <value>^\+?[1-9]\d{1,14}$</value>
  </data>
  <data name="PhoneNumberLength" xml:space="preserve">
    <value>Phone number is less than or equal to 20 characters</value>
  </data>
  <data name="ProfessionAcceptedSalaryIsrequired" xml:space="preserve">
    <value>Profession salary is required</value>
  </data>
  <data name="ProfessionDeleted" xml:space="preserve">
    <value>Profession deleted successfully</value>
  </data>
  <data name="ProfessionDescriptionLength" xml:space="preserve">
    <value>Profession description length is less than or equal 300 characters</value>
  </data>
  <data name="ProfessionDescriptionRequired" xml:space="preserve">
    <value>Profession description is required</value>
  </data>
  <data name="ProfessionNotFound" xml:space="preserve">
    <value>Profession is not found</value>
  </data>
  <data name="ProfessionTitleLength" xml:space="preserve">
    <value>Profession title length is less than or equal 100 characters</value>
  </data>
  <data name="ProfessionTitleRequired" xml:space="preserve">
    <value>Profession title is required</value>
  </data>
  <data name="SalaryLength" xml:space="preserve">
    <value>Salary must be greater than 0</value>
  </data>
  <data name="UnhandledException" xml:space="preserve">
    <value>An unhandled exception occurred.</value>
  </data>
</root>